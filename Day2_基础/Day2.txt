			

				》》》python基础《《《

			1.
[root@lenovo~ ]# python3	 	##在python3交互界面 换行的方法
>>> print('hello  \		## “\“ 反斜杠
... world')
hello  world
>>> 

	
		  	2.同行多个语句
				分号；	允许你将多个语句写在同一行上	
				但是某些语句不能在这行开始一个新的代码快
				因为可读性会变差，不推荐使用



			3.帮助文档

			print（）

>>> help(print)
			
Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.		##value之间默认值空格
    end:   string appended after the last value, default a newline.	##最后一个之后面换行
    flush: whether to forcibly flush the stream.



>>> print("hello","world")
hello world
>>> print("hello","world",sep=";")
hello;world						##value之间以；分割
						
>>> print ("hello print",end="")		##end 以空结合
hello print>>> 


			4.input()

 >>> user=input("请输入用户名:")
请输入用户名:yy
>>> print(user)
yy


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

						》》》数据类型《《《


python中不能直接定义变量，需要先赋值
赋值的语句： 变量名 = 值
			
			》》整数《《

			十进制0～9
			二进制0  1    0b100110 0B100110
			八进制0～7    0o1709   0O1709
			十六进制0～9 A～F  0x1a5f  0X2df4

在python中进制的表示

		二进制 		
		>>> 0b1000
		8
		>>> 0b11111111
		255

		八进制
		>>> 0o10
		8

		十六进制
		>>> 0x1f4d
		8013

		在python中整数理论上可以无限大
			

			
		》》布尔值《《

True	1	有值/有效/条件满足，成立
False	0	没有值/无效/条件不满足，不成立
						##首字母必须大写
>>> True+1
2
>>> False-1
-1


		》》浮点数《《
带有小数点的数字

		整数和浮点数作运算时，数据类型会转为浮点数
>>> 2.5*2
5.0		##得到一个浮点数 5.0 而不是整数5

		》》复数《《

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^6

				》》》算术运算《《《

			+ -  *  /   //   %   ** 
在python中   /   得到商
	       //  得到商的整数部分	地板除
	       %   得到余数


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			》》》定义字符串《《《
用引号定义字符串
''   
" "   
 '''  '''   
"""  """


>>> '''hello 
... world'''
'hello \nworld'			##三引号可以换行输出
>>> print('''step1 ......
... step2 ......
... step3 ......''')
step1 ......
step2 ......
step3 ......


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

				》》》字符串切片《《《
切片
从有顺序的一组数据中取出制定的内容

索引
表示数据的位置


>>> mystr = "hello"
>>> print(mystr[0])		##索引从零开始
h
>>> print(mystr[1])
e
>>> print(mystr[-1])		##用-1表示最后一位
o

					##取出一组字符串
>>> mystr = "this is a test string"
>>> mystr[5:7]			## [5:7]不包含第7个字符
'is'
>>> mystr[10:14]
'test'

>>> mystr[5:]			##从5开始到最后
'is a test string'
>>> mystr[:-2]			##从开头到倒数第二个
'this is a test stri'
>>> mystr[:]			##只写： 代表全部
'this is a test string'


			》》字符串的运算《《

字符串的加法
>>> str1 = "hello "
>>> str2 = "world"	##没有减法
>>> str1 + str2 
'hello world'


字符串的乘法
>>> str = "#"		##没有除法		
>>> str * 10
'##########'


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

				》》》列表《《《
 
列表
容器可以存放任意类型的python对象
使用[ ]表示列表，列表中的值用逗号分隔
>>> lists = [1,2,3,4.25,True,False,"abc",[1,2,3]]
>>> lists
[1, 2, 3, 4.25, True, False, 'abc', [1, 2, 3]]

		列表的操作
		>>> lists[-1]
		[1, 2, 3]
		>>> lists[1]
		2
		>>> lists[0]
		1

判断元素是否在列表中
	in  / not in 
>>> "2" in lists
False
>>> 2 in lists
True
>>> 4 not in lists
True

                                                                                                     
		列表赋值
	可以对索引/切片的结果赋值，修改列表的内容
>>> lists[0] = 0					##对lists的元素赋值
>>> lists
[0, 2, 3, 4.25, True, False, 'abc', [1, 2, 3]]

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

					》》元组《《
元组的内容不可改变，用中括号表示
，其余的和列表相同

>>> yuanzu = (1,2,3)
>>> yuanzu 
(1, 2, 3)
>>> yuanzu[0]
1
>>> yuanzu[0]= 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

					》》》字典《《《
	用大括号表示
	由键和值构成的有关系的数据类型
	格式：
		{键：值，键：值，....}

	 
>>> adict = {"name":"bob","age":18}
>>> adict["name"]				##使用键进行索引
'bob'

>>> adict["age"]=22			##修改键值对
>>> adict 
{'name': 'bob', 'age': 22}



>>> adict = {"name":"bob","age":18}
>>> adict["yy"]="boy"			##对一个不存在的键进行赋值，则作为键值对添加到字典中
>>> adict 
{'name': 'bob', 'age': 18, 'yy': 'boy'}


	in/not in
		使用in/not in 判断键是否存在
			    -------

>>> adict 
{'name': 'bob', 'age': 22}
>>> "name" in adict			##对键做判断
True				
>>> "bob" in  adict			##对值做判断False
False

	

		数据类型比较

	可变类型：列表，字典
	不可变类型：数字，字符串，元组
	

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	
				》》》比较运算符《《《
		
		==  != >=  <=   >  <
		等于是 ==   = 是赋值				

>>> 1!= 2			
True
>>> 1== 2
False
>>> 1< 2

		字符串之间的比较
		会按照首字符的ascii编码表的值比较
		       ---------
>>> 'a'>'b'
False
			
>>> 'admin'>'b'	##admin 首字符为a  结果和 a>b 一样
False

			》》》逻辑运算符《《《
			and 
			 or
		      not		


>>> 0 and 1
0
>>> 1 and 1
1
>>> 0 or 1
1
>>> 0 or 0
0
>>> not 0		## not 0  不是0 就是1    (不是False 就是True)
True	
>>> not 1		## not 1  不是1 就是0  
False


>>> not True
False
>>> True and  False
False

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

					》》》if《《《

	if语句格式：
		if expression;
		    if_suite
		else:
		    else_suite


	条件语句

		表达式数字为非零即为True
	>>> if 10:			##非零 为True
	...     print("yes")
	... else:
	...     print("no")
	... 
	yes

	

		空字符串，空列表，空元组，空字典的值均为False

	>>> if "":			##空字符串 为False
	...     print("yes")
	... else:
	...     print("no")
	... 
	no

	>>> if "oo":		##非空字符串 为True
	...     print("yes")
	... else:
	...     print("no")
	... 
	yes
	
		
				
				》》》扩展if《《《

	扩展if格式：
			if exp：
			    if_suit
			elif exp2:
			    if_suit2
			else:
			    if_suit3				

	
		

		>>> grade = input("请输入你的成绩：")
		请输入你的成绩：99
		>>> grade == 99		##input 会将输入转换为字符串类型
		False
		>>> grade 
		'99'

		>>> int(grade) == 99	## int()函数将数据类型转换为整数
		True

		……………………………………………………………………
		条件表达式：
			三元运算符：
				格式：
				X if C esle Y
				
				
			>>> x,y=3,4		##相当于 x=3，y=4
			>>> smaller = x if x<y else y	
			>>> print(smaller)
			3


		意思和下面的代码一样	
			x=3;y=4
			if x<y:
			    smaller = x
			else:
			    smaller = y
			smaller
			
			3	
				




























