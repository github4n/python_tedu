			
					》》》for循环《《《

	for循环格式：
		for  变量列表	in  可迭代对象:
			for_suit

	可迭代对象：字符串 列表 元组 字典
	迭代/遍历： 使用for循环查找可迭代对象中的每一个元素

>>> for i in "abcd":	##字符串
...     print(i)
... 
a
b
c
d
	for循环会先从可迭代对象中取出每一个元素，依次和变量列表的变量绑定
	for循环的次数和可迭代对象的元素个数相等
	for循环的变量列表是真实存在的，尽量是用新的变量循环
	如果使用for循环遍历一个空的可迭代对象，循环不会执行对应的变量也可能不会创建


				》》》range函数《《《
		
		range函数的完整语法为：
			range(start,end,step=1)	
			包含起始值，不包含结束值

>>> for i in range(1,5,2):	##step=2   和shell中{1..6..2}一致
...     print(i)
... 
1
3

	列表追加元素   .append()

	>>> fib = [1,2]
	>>> fib.append(9)
	>>> fib
	[1, 2, 9]




				>>>列表解析<<<

		格式：
			[expr for iter_var n iterable]

			expr 的值为列表的元素
			
	##把alist的所有元素平方

>>> alist = [1,2,3]
>>> [i**2 for i in alist]
[1, 4, 9]


	##把1～20之间所有的奇数放入列表
>>> [i for i in range(1,21) if i%2 == 1]
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


				》》》文件对象《《《

	open（）
	格式：
		file_object = open(file_name,access_mode='r',buffering=-1)
					三个参数：
						file_name	文件名
						access_mode	文件访问模式
						buffering 	缓存

			文件模式：
				r读	以读方式打开（文件不存在报错）
				w写	文件存在则清空，不存在则创建
				
				
				
 
>>> a = open("Day3.txt")			##打开文件返回一个文件对象 存在变量a中
>>> a 
<_io.TextIOWrapper name='Day3.txt' mode='r' encoding='UTF-8'>

>>> a.close()				##关闭文件



				》》read()《《
		
		
		>>> fobj = open("test.txt")
		>>> fobj.read()		##第一次读取，指针会移动到文件的最后
		'天王盖地虎\n宝塔镇河妖\n'
		>>> fobj.read()		##第二次读取，指针后没有内容会返回空的字符串
		''

[root@lenovo pycharm]# ls /mnt/
passwd
>>> a = open("/mnt/passwd")
>>> a.read(5)				
'root:'
>>> a.readline()				
'x:0:0:root:/root:/bin/bash\n'
>>> a.readline(5)				##readline(size)读取指定字节数，默认读取一整行(\n为止)
'bin:x'			
>>> a.readline()
':1:1:bin:/bin:/sbin/nologin\n'	##指针移动了5字节 读取一行剩下的内容


				》》readlines()《《
			
			以列表的形式返回所有行
			  --------
>>> a.readlines(1)			##readlines(size)读取指针到行末尾
['root:x:0:0:root:/root:/bin/bash\n']
>>> a.readlines()				##readlines()读取执政到末尾行
['daemon:x:2:2:daemon:/sbin:/sbin/nologin\n', 'adm:x:3:4:adm:/var/adm:/sbin/nologin\n', 'lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n', 'sync:x:5:0:sync:/sbin:/bin/sync\n', 'shutdown:x


			   	》》文件模式《《
			   	
			   	
		写入文件
			函数:
		write()	   添加字符串
		writelines()   添加列表
		
			w  若文件有内容清空，文件不存在则自动创建
		文件对象的访问模式需要支持写入
		默认的情况下文件的写入不会立即生效，需要文件对象关闭后生效
		文件写如时不会添加换行\n,如果需要手动添加
	
	
	函数：	
		write()  

	
>>> a = open("open_w.txt","w")
>>> a.write("hello world")		##write() 
11
>>> a.write("ni hao")
6
>>> a.close()				##关闭文件对象

[root@lenovo pycharm]# cat  open_w.txt 
hello worldni hao[root@lenovo pycharm	##write没有换行

 


>>> a = open("open_w.txt","w")
>>> a,write("hello world\n")
>>> a.write("123456\n")			##加入换行符

[root@lenovo pycharm]# cat open_w.txt 
[root@lenovo pycharm]# 

>>> a.close()				##当文件对象关闭时 才会写入文件

[root@lenovo pycharm]# cat open_w.txt 
hello world
123456

			
		函数：
			writelines()	#写入列表数据


>>> data = ["123456\n","Taren1\n"]
>>> a = open("open_w.txt","w")
>>> a.writelines(data)
>>> a.close()

[root@lenovo pycharm]# cat open_w.txt 
123456
Taren1


		##文件对象也是可迭代的 
			 
				>>> a = open("open_w.txt")
				>>> for i in a:
				...     print(i)
				... 
				123456

				Taren1


				》》》with《《《
	

>>> a =open("open_w.txt")	##a.closed 判断文件对象是否关闭
>>> a.closed 
False
>>> a.close()
>>> a.closed
True

		with格式：
			with open("hello.py") as a:    ##关键字 with  open("文件名")   as  文件对象:
				f.read()			##缩进			               ---------
			
			a.closed  判断文件对象是否关闭
		
	
	案例：
	
	>>> with open("open_w.txt") as a:
	...     a.readlines()
	... 
	['123456\n', 'Taren1']
	>>> a.closed	
	True
		
			》》》文件内移动指针《《《
		seek(offset[,whence]):移动文件指针到不同的位置
		
		offset是相对与whence的偏移量
		whence的值：
			      0表示文件开头，
			      1表示当前位置，
			      2表示文件的结尾
			      
		tell():返回当前文件指针的位置
	
	
	>>> with open("open_w.txt") as a:
	...     a.read()			
	...     a.seek(0,0)		## 0偏移，0表示文件开头
	...     a.read()
	... 
	    '123456\nTaren1'
	0
	'123456\nTaren1'


	>>> with open("open_w.txt") as a:
	...     a.read()
	...     a.seek(6,0)	 	##6偏移，0表示文件开头
	...     a.read()
	... 
	'123456\nTaren1'
	6
	'\nTaren1'
 	
 	
	>>> with open("open_w.txt","rb") as a:
	...     a.seek(-2,2)		##将指针移动到末尾的前两个字节
	...     a.read()
	... 
	17
	b'n1'

 	

		##将文件对象作为可迭代对象
		>>> with open("open_w.txt") as a:
		...     for i in a:
		...             print(i)
		  ... 
		123456     
		Taren1Taren1



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

				》》》函数《《《
				
		函数格式：
			def 函数名（参数列表）：
			'文档字符串'
			fun_suit
	
	函数名 同 变量名
	参数列表	
				
				
	函数参数：
		参数时函数运行时必须要的值
		把参数给函数的过程叫做传参

			》》形参《《
	>>> def foo(x,y):
	...     print("x=%d,y=%d"%(x,y))
	... 
	>>> foo(3,4)
	x=3,y=4
		
		
			》》》python3 位置参数《《《
			
		与shell脚本类似，程序名以及参数都以位置参数的方式传递给python程序
		使用sys模块的argv列表接收
			
			
[root@lenovo pycharm]# vim args.py 
#!/usr/bin/env python3
import sys
print(sys.argv)
		
[root@lenovo pycharm]# python3 args.py  1 2	##实质上是向列表中添加元素 
['args.py', '1', '2']					##列表中第一个元素脚本名
			
				
				

		 	》》默认参数《《
				
		def pstar(num=5):       # 默认参数
		    print("*"*num)


		pstar()	  fffff1
		
		******			
				az[]
33		1

				
				
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

			》》》模块《《《
		
		自定义模块名不要和已存在模块名重复
		
		import  模块名   as  别名				
		>>> import sys	 
		>>> sys.argv	## 模块名.属性
		['']			##没有文件列表值为空
				
		
	
		单独导入模块中的某些属性				
		>>> from random import randint 
		>>> randint(1,10)
		9
	
	
		
		>>load<<
		一个模块只被加载一次，无论他被导入多少次
		只加载一次可以阻止多重导入时代码被多次执行
		如果两个文件相互导入，防止了无限的相互加载
		模块加载时，顶层代码会自动执行，所以只将函数放入
		模块的顶层是良好的编程习惯
		
		vim a.py
		import b
		print("a.py")
		
		
		vim b.py
		import a
		print("b.py")
		
		
		执行a.py 		
		a.py		
		b.py
		a.py


		>>模块导入的特性<<
		模块据有一个__name__特殊属性
		当模块文件直接执行时，__name__的值为"__main__"
		当模块被零一个文件导入时，__name__的值就是该模块的名字

		[root@lenovo~ ]# vim  __name__.py
		import hello
		print(__name__)
		print(hello.__name__)

		[root@lenovo~ ]# python3 __name__.py 
		hello world
		__main__		
		hello















		
		
		
		
		
		
		
				
				
				
				
				
				
				
				
				
				
			



