	
					》》》re模块《《《

Python自1.5以后增加了re模块提供了正则表达式模块

re模块是Python语言拥有了安不的正则表达式功能



					》》》》re.match函数《《《《


原型：match(pattern,string.flags=0)
patter: 匹配的正则表达式
string: 要匹配的字符串

flags：标志位，用于控制正则表达式，值如下
	re.I	忽略大小写
	re.L	做本地户识别
	re.M	多行匹配，影响^和$
	re.S	是匹配包括换行符在内的所有字符
	re.U	根据Unicode字符集解析字符，影响\w  \W  \b \B
	re.X 	使我们更灵活的格式理解正则表达式

功能：尝试从字符串的开始位置匹配一个模式，如果不是起始位置匹配成功的话，返回None
							# 相当于^,返回开头的匹配成功的结果
re.match()

>>> import re
>>> re.match('www', 'www.baidu.com')
<_sre.SRE_Match object; span=(0, 3), match='www'>


>>> print(re.match('com', 'www.baidu.com'))	# 不再起始位置，返回None
None

>>> re.match('www', 'WWW.baidu.com',flags=re.I)	# flags=re.I 忽略大小写
<_sre.SRE_Match object; span=(0, 3), match='WWW'>




>>> re.match('www','www.baidu.com').span()		# 返回字符串的下标位置
(0, 3)

…………………………………………………………………………………………………………………………………………………………………………

					
					  》》》re.search《《《
	
re.search(patter,string,flags)
	功能：扫描整个字符串，并返回第一个成功的匹配结果,只返回第一个
		



>>> re.search('sunck', 'good man is sunckj! sunck is nice')
<_sre.SRE_Match object; span=(12, 17), match='sunck'>


>>> re.search('www', 'WWW.baidu.com',flags=re.I)
<_sre.SRE_Match object; span=(0, 3), match='WWW'>






				》》》re.findall()函数《《《

re.findall(patter,string,flags)
	功能：扫描整个字符串，并返回所有结果 返回一个结果列表。

>>> re.findall('sunck', 'good man is sunckj! sunck is nice')
['sunck', 'sunck']


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

						》》》正则符号《《《《

.	匹配处换行符号意外的任意字符
[  ]  	匹配方括号中所包含的任意一个字符

[\d]	匹配数字
[\D]	匹配非数字字符
[\w]	匹配数字字母下划线
[\W]	匹配非数字，字母和下划线
[\s]	匹配任意的空白符(空格，换行，回车，换页，制表) 	[ \f\n\r\t]
\S	匹配  \s 
 


				》》》锚字符（边界字符）《《《
^	行首匹配
$	行末匹配
\A	匹配字符串开始，它和^的区别是，'\A'只匹配整个字符串的开头，即使在re.M模式下也不会匹配其它行的行首
\Z	只匹配字符串的末尾，即使再re.M模式下
\b	匹配一个单词的边界，也就是指单词和空格间的位置,要加 r转义   （r'er\b' 匹配以er结尾的单词）
\B	匹配非单词边界



\A 和 ^ 的不同
	^
	>>> re.findall('^sunck','sunck is a good man\nsunck is a nice man',flags=re.M)
	['sunck', 'sunck']
	
	\A
	>>> re.findall('\Asunck','sunck is a good man\nsunck is a nice man',flags=re.M)
	['sunck']

\Z 和 $的 不同
	
	>>> re.findall('man\Z','sunck is a good man\nsunck is a nice man',flags=re.M)
	['man']
	>>> re.findall('man$','sunck is a good man\nsunck is a nice man',flags=re.M)
	['man', 'man']


\b
			
	>>> re.search(r'er\b','never')
	<_sre.SRE_Match object; span=(3, 5), match='er'>
	>>> re.search(r'er\b','nerve')
	>>> 

\B
	>>> re.search(r'er\B','never')
	>>> 
	>>> re.search(r'er\B','nerve')
	<_sre.SRE_Match object; span=(1, 3), match='er'>
	>>> 
	





















